import sys
import re
import json

def main():
    if len(sys.argv) < 2:
        print("Usage: python script.py <file_path>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        # 读取文件失败则返回的行号为0
        print(json.dumps([{"loc": "0", "reason": "Failed to read file: " + str(e)}]))
        return
    
    # 定义匹配API端点的正则表达式（两种形式：def action = { 和 def action(args) {）
    action_patterns = [
        re.compile(r'def\s+(\w+)\s*=\s*\{', re.MULTILINE),
        re.compile(r'def\s+(\w+)\s*\(.*\)\s*\{', re.MULTILINE)
    ]
    
    # 匹配参数清理代码的正则表达式（允许跨行）
    sanitize_pattern = re.compile(
        r'params\.each\s*\{[^}]*key,\s*value[^}]*->[^}]*params\[key\]\s*=\s*sanitizeInput\(value\)[^}]*\}',
        re.MULTILINE | re.DOTALL
    )
    
    vulnerabilities = []
    
    # 查找所有API端点
    for pattern in action_patterns:
        for match in pattern.finditer(content):
            action_start = match.start()
            action_name = match.group(1)
            
            # 找到该方法的结束位置（匹配大括号）
            brace_count = 1
            current_pos = match.end()
            content_length = len(content)
            
            while brace_count > 0 and current_pos < content_length:
                if content[current_pos] == '{':
                    brace_count += 1
                elif content[current_pos] == '}':
                    brace_count -= 1
                current_pos += 1
            
            method_content = content[match.start():current_pos]
            
            # 检查方法内容中是否包含参数清理代码
            if not sanitize_pattern.search(method_content):
                # 找到方法起始行号
                line_number = content[:match.start()].count('\n') + 1
                vulnerabilities.append({
                    "loc": str(line_number),
                    "reason": f"API endpoint '{action_name}' lacks parameter sanitization"
                })
    
    print(json.dumps(vulnerabilities, indent=2))

if __name__ == "__main__":
    main()