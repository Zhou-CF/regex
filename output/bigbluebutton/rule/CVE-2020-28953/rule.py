import sys
import re
import json

def detect_vulnerabilities(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except:
        return json.dumps([{"loc": "0", "reason": "Failed to read file"}])
    
    lines = content.split('\n')
    vulnerabilities = []
    
    # 检测服务端Scala代码中的漏洞
    if file_path.endswith('Polls.scala'):
        # 检查是否缺少responder存在性检查
        pattern = r'p\.respondToQuestion\(questionID,\s*responseID,\s*responder\)'
        for i, line in enumerate(lines, 1):
            if re.search(pattern, line):
                # 检查是否在调用respondToQuestion之前有responder存在性检查
                prev_lines = '\n'.join(lines[max(0, i-10):i-1])
                if not re.search(r'if\s*\(.*responder.*\)', prev_lines):
                    vulnerabilities.append({
                        "loc": str(i),
                        "reason": "Missing check if user has already voted before calling respondToQuestion"
                    })
    
    # 检测服务端JavaScript代码中的漏洞
    elif file_path.endswith('publishVote.js'):
        # 检查是否缺少用户已投票检查
        has_user_check = False
        for i, line in enumerate(lines, 1):
            if 'users.includes' in line:
                has_user_check = True
                break
        
        if not has_user_check:
            # 查找投票处理逻辑
            for i, line in enumerate(lines, 1):
                if 'Polls.update' in line or 'publishUserMessage' in line:
                    vulnerabilities.append({
                        "loc": str(i),
                        "reason": "Missing check if user has already voted before processing vote"
                    })
    
    # 检测客户端JavaScript代码中的漏洞
    elif file_path.endswith('service.js'):
        # 检查是否缺少防抖处理
        has_debounce = False
        for i, line in enumerate(lines, 1):
            if 'debounce' in line:
                has_debounce = True
                break
        
        if not has_debounce:
            # 查找投票处理函数
            for i, line in enumerate(lines, 1):
                if 'handleVote' in line and 'makeCall' in line:
                    vulnerabilities.append({
                        "loc": str(i),
                        "reason": "Missing debounce for handleVote function, allowing multiple rapid clicks"
                    })
    
    return json.dumps(vulnerabilities, indent=2)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(json.dumps([{"loc": "0", "reason": "Invalid arguments"}]))
        sys.exit(1)
    
    file_path = sys.argv[1]
    result = detect_vulnerabilities(file_path)
    print(result)